# -*- coding: utf-8 -*-
"""Hand Written Digit Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EE1W4dci0VtUPU4pKu9dMsHSejd9E71r
"""

#import libraries
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.mnist

(x_train ,y_train), (x_test, y_test) = mnist.load_data()

print(x_train[0])

plt.imshow(x_train[19], cmap = plt.cm.binary)
plt.show()

y_train[14]

#Normalise
x_train = tf.keras.utils.normalize(x_train, axis =1)
x_test = tf.keras.utils.normalize(x_test, axis =1)

#create model
model = tf.keras.models.Sequential()

#1*784
model.add(tf.keras.layers.Flatten())

#hidden layers
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))

#output layer
model.add(tf.keras.layers.Dense(10, activation = tf.nn.softmax))

model.compile(optimizer = 'adam' , loss = 'sparse_categorical_crossentropy', metrics =['accuracy'])

model.fit(x_train, y_train, epochs =2)

value_loss, value_acc, = model.evaluate(x_test, y_test)

pred = model.predict(x_test)

print(np.argmax(pred[20]))

plt.imshow(x_test[20], cmap = plt.cm.binary)

